MERGE SORT ON LINKED LIST.


#include<bits/stdc++.h>
using namespace std;

#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x<<" "; _print(x); cerr << endl;
#else
#define debug(x);
#endif

typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;

void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}

#define fast_io ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define lli long long int
#define mod 1000000007
#define PB push_back
#define PPB pop_back
#define MP make_pair
#define vi vector<int>
#define vpi vector<pair<int,int>>
#define vc vector<char>
#define vlli vector<long long int>
#define vvi vector<vector<int>>
#define uos unordered_set<int>
#define min_heap priority_queue<int,vector<int>,greater<int>>
#define max_heap priority_queue<int>
#define pii pair<int,int>
#define F first
#define S second
#define loop(a,b) for(lli i=a;i<=b;i++)
#define endl '\n'

class node
{
public:
	int data;
	node* next;

	node(int value)
	{
		data = value;
		next = nullptr;
	}
};

void print_linked_list(node* head)
{	
	node* temp = head;
	while(temp != nullptr)
	{
		cout<<temp->data<<" ";
		temp = temp->next;
	}
}

node* merge(node* head1,node* head2)
{
	node* merged = new node(-1);
	node* temp = merged;

	while(head1 != nullptr && head2 != nullptr)
	{
		if(head1->data < head2->data)
		{
			temp->next = head1;
			head1 = head1->next;
		}
		else
		{
			temp->next = head2;
			head2 = head2->next;
		}
		temp = temp->next;
	}

	while(head1 != nullptr)
	{
		temp->next = head1;
		head1 = head1->next;
		temp = temp->next;
	}

	while(head2 != nullptr)
	{
		temp->next = head2;
		head2 = head2->next;
		temp = temp->next;
	}

	return merged->next;
}

node* findMid(node* head)
{
	node* fast =head;
	node* slow = head;

	while(fast->next != nullptr)
	{
		fast = fast->next->next;
		slow = slow->next;
	}
	return slow;
}

node* merge_sort(node* head)
{
	if(head == nullptr)
		return nullptr;

	node* mid = findMid(head);
	node* head2 = mid->next;
	mid->next = nullptr;

	merge_sort(head);
	merge_sort(head2);

	node* final_head = merge(head,head2);
	return final_head;
}

void solve()
{
	int tc;
	cin>>tc;

	while(tc--)
	{
		int n,t;
		cin>>n;
		node *head = new node(-1);
		node *temp = head;
		while(n--)
		{
			cin>>t;
			temp->next = new node(t);
			temp = temp->next;
		}


		head = head->next;
		merge_sort(head->next);

		print_linked_list(head);
	}
}

int main()
{
	fast_io;

#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	freopen("error.txt","w",stderr);
#endif

	solve();

	return 0;
}
